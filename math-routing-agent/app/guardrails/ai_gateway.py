import re
from typing import Dict, Any, List

class InputGuardrail:
    """Enhanced input validation with privacy protection"""
    
    @staticmethod
    def validate_mathematical_content(query: str) -> bool:
        """Ensure query is math-related and safe"""
        # Mathematical patterns
        math_patterns = [
            r'\d+', r'[+\-*/^=]', r'sin|cos|tan|log|ln|sqrt',
            r'equation|solve|calculate|derivative|integral',
            r'algebra|geometry|calculus|trigonometry|probability',
            r'area|volume|angle|triangle|circle|function'
        ]
        
        # Privacy protection - block personal data patterns
        privacy_patterns = [
            r'\b\d{3}-\d{2}-\d{4}\b',  # SSN
            r'\b\d{16}\b',  # Credit card
            r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',  # Email
            r'\b\d{10}\b'  # Phone numbers
        ]
        
        has_math = any(re.search(pattern, query.lower()) for pattern in math_patterns)
        has_private = any(re.search(pattern, query) for pattern in privacy_patterns)
        
        return has_math and not has_private
    
    @staticmethod
    def sanitize_input(query: str) -> str:
        """Sanitize and remove potentially harmful content"""
        # Remove scripts and HTML
        sanitized = re.sub(r'<script.*?</script>', '', query, flags=re.DOTALL)
        sanitized = re.sub(r'<[^>]+>', '', sanitized)
        # Remove special characters but keep math symbols
        sanitized = re.sub(r'[<>"\'&;]', '', sanitized)
        return sanitized.strip()

class OutputGuardrail:
    """Enhanced output validation for educational content"""
    
    @staticmethod
    def validate_educational_content(response: str) -> bool:
        """Ensure response contains proper educational explanation"""
        educational_indicators = [
            'step', 'solution', 'explanation', 'therefore',
            'calculate', 'formula', 'method', 'approach'
        ]
        
        response_lower = response.lower()
        educational_score = sum(1 for indicator in educational_indicators if indicator in response_lower)
        
        return educational_score >= 2
    
    @staticmethod
    def format_step_by_step(steps: List[str], final_answer: str) -> str:
        """Format solution in educational step-by-step manner"""
        formatted = "## Step-by-Step Mathematical Solution\n\n"
        
        for i, step in enumerate(steps, 1):
            formatted += f"**Step {i}:** {step}\n\n"
        
        formatted += f"### âœ… Final Answer\n**{final_answer}**\n\n"
        formatted += "---\n*This solution was generated by your AI Math Professor*"
        
        return formatted

class AIGateway:
    def __init__(self):
        self.input_guardrail = InputGuardrail()
        self.output_guardrail = OutputGuardrail()
    
    def process_input(self, user_query: str) -> Dict[str, Any]:
        """Process input through privacy and content guardrails"""
        sanitized_query = self.input_guardrail.sanitize_input(user_query)
        is_valid = self.input_guardrail.validate_mathematical_content(sanitized_query)
        
        return {
            "sanitized_query": sanitized_query,
            "is_valid": is_valid,
            "error_message": None if is_valid else "Query must be mathematical and educational in nature"
        }
    
    def process_output(self, solution: str, steps: List[str]) -> Dict[str, Any]:
        """Process output through educational content guardrails"""
        is_valid = self.output_guardrail.validate_educational_content(solution)
        
        if is_valid:
            formatted_solution = self.output_guardrail.format_step_by_step(steps, solution)
            return {
                "formatted_solution": formatted_solution,
                "is_valid": True
            }
        else:
            return {
                "formatted_solution": "I apologize, but I couldn't generate a proper educational solution. Please try again with a different mathematical question.",
                "is_valid": False
            }